name: "Build iOS app"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install Yarn
        run: |
          yarn install
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7' # Specify your required Ruby version

      - name: Get info on configuration
        run: | 
          echo "Processor Details"
          sysctl -n machdep.cpu.brand_string
          echo "Node version"
          node --version
          echo "Xcode version"
          xcodebuild -version
          echo "mac flavor"
          system_profiler SPSoftwareDataType
          echo "printing existing scheme:" ${IOS_SCHEME}
      - name: List available schemes
        run: |
          cd ios
          xcodebuild -list -workspace tree.xcworkspace
      - name: Install Pods
        run: |
          cd ios
          pod setup
          pod install
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # Set the keychain as the default
          security list-keychains -s $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          # Verify the provisioning profile installation
          echo "Installed provisioning profiles:"
          ls ~/Library/MobileDevice/Provisioning\ Profiles
          # Debug: List keychains and check for the certificate
          echo "Keychains list:"
          security list-keychains
          echo "Keychain contents:"
          security find-identity -v -p codesigning
      - name: Print details of Provisioning profile
        run: |
          security cms -D -i $RUNNER_TEMP/build_pp.mobileprovision
      # - name: Build App
      #   run: |
      #     cd ios
      #     ls -la
      #     echo "Present working directory is: $(pwd)"
      #     echo "checking xcodebuild location and version"
      #     which xcodebuild
      #     xcodebuild -version
      #     echo "Current Path: $PATH"
      #     # Build the app
      #     # xcodebuild -project YourApp.xcodeproj -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath $RUNNER_TEMP/YourApp.xcarchive
      #     # xcodebuild -project YourApp.xcodeproj -scheme "QA_Managed" -sdk iphoneos -configuration Release archive -archivePath $RUNNER_TEMP/YourApp.xcarchive
      #     # xcodebuild clean archive PRODUCT_BUNDLE_IDENTIFIER="com.ntr.us.qa.tree" -workspace "tree.xcworkspace" -scheme "tree QA Unmanaged" -configuration "RELEASE" -allowProvisioningUpdates CODE_SIGN_IDENTITY="iPhone Distribution" PROVISIONING_PROFILE_SPECIFIER="${{ secrets.BUILD_PROVISION_PROFILE_SPECIFIER }}" -derivedDataPath $RUNNER_TEMP/build -archivePath $$RUNNER_TEMP/build/Products/tree.xcarchive
      #     xcodebuild -workspace "tree.xcworkspace" PRODUCT_BUNDLE_IDENTIFIER="com.ntr.us.qa.tree" \
      #       -scheme "tree QA Unmanaged" \
      #       -configuration Release \
      #       -sdk iphoneos \
      #       # build \
      #       # CODE_SIGN_STYLE=Manual \
      #       # "CODE_SIGN_IDENTITY[sdk=iphoneos*]"="Apple Development" \
      #       # "PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]"="Naga tree QA Dev Profile"

      - name: Build and Archive App
        env:
          PATH: /Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin
        run: |
          cd ios
          # Build and Archive the app
          # xcodebuild -project YourApp.xcodeproj -scheme YourApp -sdk iphoneos -configuration Release archive -archivePath $RUNNER_TEMP/YourApp.xcarchive
          # xcodebuild -project YourApp.xcodeproj -scheme "QA_Managed" -sdk iphoneos -configuration Release archive -archivePath $RUNNER_TEMP/YourApp.xcarchive
          # xcodebuild clean archive PRODUCT_BUNDLE_IDENTIFIER="com.ntr.us.qa.tree" -workspace "tree.xcworkspace" -scheme "tree QA Unmanaged" -configuration "RELEASE" -allowProvisioningUpdates CODE_SIGN_IDENTITY="iPhone Distribution" PROVISIONING_PROFILE_SPECIFIER="${{ secrets.BUILD_PROVISION_PROFILE_SPECIFIER }}" -derivedDataPath $RUNNER_TEMP/build -archivePath $$RUNNER_TEMP/build/Products/tree.xcarchive
          xcodebuild -workspace "tree.xcworkspace" PRODUCT_BUNDLE_IDENTIFIER="com.ntr.us.qa.tree" \
            -scheme "tree QA Unmanaged" \
            -configuration Release \
            -sdk iphoneos \
            archive \
            -archivePath $RUNNER_TEMP/tree.xcarchive \
            CODE_SIGN_STYLE=Manual \
            "CODE_SIGN_IDENTITY\[sdk=iphoneos*\]"="Apple Development" \
            "PROVISIONING_PROFILE_SPECIFIER\[sdk=iphoneos*\]"="Naga tree QA Dev Profile 20240724"
            
      - name: Create exportOptions.plist from secret
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          # generate in terminal local 
          # base64 -i exportOptions.plist -o exportOptions.plist.base64
          # cat exportOptions.plist.base64
          echo "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $RUNNER_TEMP/exportOptions.plist 

      - name: Navigate to Archive Directry and List contents
        run: |
          cd $RUNNER_TEMP
          echo "---Inside Runner temp-----"
          ls -la
          cd tree.xcarchive
          echo "---Inside Xarchive---"
          ls -la

      - name: Export IPA
        run: |
          cd ios
          echo "Current directory: $(pwd)" # Print the current directory for debugging
          ls -la # List files in the current directory for debugging
          # Export the IPA
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/tree.xcarchive \
            -exportOptionsPlist $RUNNER_TEMP/exportOptions.plist \
            -exportPath $RUNNER_TEMP/build

      - name: verify IPA Creation
        run: |
          ls -la $RUNNER_TEMP/build

      - name: Check if IPA Exists
        run: |
          if [ -f "$RUNNER_TEMP/build/tree QA Unmanaged.ipa" ]; then 
            echo "IPA file exists"
          else 
            echo "IPA file does not exists"
            exit 1
          fi

      - name: Upload application
        uses: actions/upload-artifact@v2
        with:
          name: treeUnmanagedApp
          path: ${{ runner.temp }}/build/tree\ QA\ Unmanaged.ipa
          retention-days: 10
